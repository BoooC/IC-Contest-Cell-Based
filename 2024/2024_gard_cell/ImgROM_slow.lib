/*
 *      CONFIDENTIAL AND PROPRIETARY SOFTWARE/DATA OF ARTISAN COMPONENTS, INC.
 *      
 *      Copyright (c) 2024 Artisan Components, Inc.  All Rights Reserved.
 *      
 *      Use of this Software/Data is subject to the terms and conditions of
 *      the applicable license agreement between Artisan Components, Inc. and
 *      Taiwan Semiconductor Manufacturing Company Ltd..  In addition, this Software/Data
 *      is protected by copyright law and international treaties.
 *      
 *      The copyright notice(s) in this Software/Data does not indicate actual
 *      or intended publication of this Software/Data.
 *      name:			ROM-DIFF-HS ROM Generator
 *           			TSMC CL013G Process
 *      version:		2002Q3V1
 *      comment:		
 *      configuration:	 -instname "ImgROM" -words 16384 -bits 8 -frequency 1 -ring_width 2 -code_file "rom.bin" -mux 32 -drive 6 -top_layer met8 -power_type rings -horiz met3 -vert met4 -cust_comment "" -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -libname "ImgROM"
 *
 *      Synopsys model for Synchronous Single-Port Rom
 *
 *      Library Name:   ImgROM
 *      Instance Name:  ImgROM
 *      Words:          16384
 *      Word Width:     8
 *      Mux:            32
 *      Process:        slow
 *      Delays:		max
 *
 *      Creation Date:  2024-02-29 01:58:17Z
 *      Version:        2002Q3V1
 *
 *      Verified With: Synopsys Design Compiler
 *
 *      Modeling Assumptions: This library contains a black box description
 *          for a memory element.  At the library level, a
 *          default_max_transition constraint is set to the maximum
 *          characterized input slew.  Each output has a max_capacitance
 *          constraint set to the highest characterized output load.  These two
 *          constraints force Design Compiler to synthesize circuits that
 *          operate within the characterization space.  The user can tighten
 *          these constraints, if desired.  When writing SDF from Design
 *          Compiler, use the version 2.1 option.  This ensures the SDF will
 *          annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: This library does not include power information.
 *          Due to limitations of the .lib format, some data reduction was
 *          necessary.  When reducing data, minimum values were chosen for the
 *          fast case corner and maximum values were used for the typical and
 *          best case corners.  It is recommended that critical timing and
 *          setup and hold times be checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */

library(ImgROM) {
	delay_model		: table_lookup;
	revision		: 1.1;	
	date			: "2024-02-29 01:58:17Z";
	comment			: "Confidential Information of Artisan Components, Inc.  Use subject to Artisan Components license. Copyright (c) 2024 Artisan Components, Inc.";
	time_unit		: "1ns";
	voltage_unit		: "1V";
	current_unit		: "1mA";
	leakage_power_unit	: "1mW";
	nom_process		: 1;
	nom_temperature		: 125.000;
	nom_voltage		: 1.080;
	capacitive_load_unit	 (1,pf);

	pulling_resistance_unit	        : "1kohm";

	/* additional header data */
	default_cell_leakage_power      : 0;
	default_fanout_load		: 1;
	default_inout_pin_cap		: 0.005;
	default_input_pin_cap		: 0.005;
	default_output_pin_cap		: 0.0;
	default_max_transition		: 1.500;

        /* default attributes */
        default_leakage_power_density : 0.0;
        slew_derate_from_library      : 1;
        slew_lower_threshold_pct_fall : 10.0;
        slew_upper_threshold_pct_fall : 90.0;
        slew_lower_threshold_pct_rise : 10.0;
        slew_upper_threshold_pct_rise : 90.0;
        input_threshold_pct_fall      : 50.0;
        input_threshold_pct_rise      : 50.0;
        output_threshold_pct_fall     : 50.0;
        output_threshold_pct_rise     : 50.0;

 	/* k-factors */
 	k_process_cell_fall             : 1;
 	k_process_cell_leakage_power    : 0;
 	k_process_cell_rise             : 1;
 	k_process_fall_transition       : 1;
 	k_process_hold_fall             : 1;
 	k_process_hold_rise             : 1;
 	k_process_internal_power        : 0;
 	k_process_min_pulse_width_high  : 1;
 	k_process_min_pulse_width_low   : 1;
 	k_process_pin_cap               : 0;
 	k_process_recovery_fall         : 1;
 	k_process_recovery_rise         : 1;
 	k_process_rise_transition       : 1;
 	k_process_setup_fall            : 1;
 	k_process_setup_rise            : 1;
 	k_process_wire_cap              : 0;
 	k_process_wire_res              : 0;
	k_temp_cell_fall		: 0.0;
	k_temp_cell_rise		: 0.0;
	k_temp_hold_fall                : 0.0;
	k_temp_hold_rise                : 0.0;
	k_temp_min_pulse_width_high     : 0.0;
	k_temp_min_pulse_width_low      : 0.0;
	k_temp_min_period               : 0.0;
	k_temp_rise_propagation         : 0.0;
	k_temp_fall_propagation         : 0.0;
	k_temp_rise_transition          : 0.0;
	k_temp_fall_transition          : 0.0;
	k_temp_recovery_fall            : 0.0;
	k_temp_recovery_rise            : 0.0;
	k_temp_setup_fall               : 0.0;
	k_temp_setup_rise               : 0.0;
	k_volt_cell_fall                : 0.0;
	k_volt_cell_rise                : 0.0;
	k_volt_hold_fall                : 0.0;
	k_volt_hold_rise                : 0.0;
	k_volt_min_pulse_width_high     : 0.0;
	k_volt_min_pulse_width_low      : 0.0;
	k_volt_min_period               : 0.0;
	k_volt_rise_propagation         : 0.0;
	k_volt_fall_propagation         : 0.0;
	k_volt_rise_transition	        : 0.0;
	k_volt_fall_transition	        : 0.0;
	k_volt_recovery_fall            : 0.0;
	k_volt_recovery_rise            : 0.0;
	k_volt_setup_fall               : 0.0;
	k_volt_setup_rise               : 0.0;


	operating_conditions(slow) {
		process	 : 1;
		temperature	 : 125.000;
		voltage	 : 1.080;
		tree_type	 : balanced_tree;
	}
        default_operating_conditions : slow;
	wire_load("sample") {
		resistance	 : 1.6e-05;
		capacitance	 : 0.0002;
		area	 : 1.7;
  		slope	 : 500;
		fanout_length	 (1,500);
	}
	output_voltage(GENERAL) {
		vol	 : 0.4;
		voh	 : VDD - 0.4;
		vomin	 : -0.5;
		vomax	 : VDD + 0.5;
	}
	input_voltage(CMOS) {
		vil	 : 0.3 * VDD;
		vih	 : 0.7 * VDD;
		vimin	 : -0.5;
		vimax	 : VDD + 0.5;
	}
	input_voltage(TTL) {
		vil	 : 0.8;
		vih	 : 2;
		vimin	 : -0.5;
		vimax	 : VDD + 0.5;
	}
        lu_table_template(ImgROM_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(ImgROM_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(ImgROM_load_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(ImgROM_passive_energy_template_1x2) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
	library_features(report_delay_calculation);
	type (ImgROM_DATA) {
		base_type : array ;
		data_type : bit ;
		bit_width : 8;
		bit_from : 7;
		bit_to : 0 ;
		downto : true ;
	}
	type (ImgROM_ADDRESS) {
		base_type : array ;
		data_type : bit ;
		bit_width : 14;
		bit_from : 13;
		bit_to : 0 ;
		downto : true ;
	}

cell(ImgROM) {
	area		 : 118289.889;
	dont_use	 : TRUE;
	dont_touch	 : TRUE;
        interface_timing : TRUE;
	bus(Q)	 {
		bus_type : ImgROM_DATA;
		direction : output;
		max_capacitance : 0.630;
                timing() {
                        related_pin :   "CLK" ;
                        timing_type : rising_edge;
                        timing_sense : non_unate;
                        cell_rise(ImgROM_delay_template) {
                   index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                   index_2 ("0.000, 0.020, 0.040, 0.080, 0.210, 0.410, 0.630");
                   values ( \
                     "2.563, 2.581, 2.599, 2.635, 2.754, 2.936, 3.136", \
                     "2.589, 2.607, 2.625, 2.662, 2.780, 2.962, 3.163", \
                     "2.622, 2.640, 2.659, 2.695, 2.813, 2.996, 3.196", \
                     "2.688, 2.707, 2.725, 2.761, 2.880, 3.062, 3.262", \
                     "2.887, 2.906, 2.924, 2.960, 3.079, 3.261, 3.461", \
                     "3.219, 3.237, 3.255, 3.292, 3.410, 3.592, 3.793", \
                     "3.550, 3.569, 3.587, 3.623, 3.742, 3.924, 4.124" \
                   )
                        }
                        rise_transition(ImgROM_load_template) {
                   index_1 ("0.000, 0.020, 0.040, 0.080, 0.210, 0.410, 0.630");
                   values ("0.070, 0.110, 0.149, 0.228, 0.485, 0.880, 1.314")
                        }
                        cell_fall(ImgROM_delay_template) {
                   index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                   index_2 ("0.000, 0.020, 0.040, 0.080, 0.210, 0.410, 0.630");
                   values ( \
                     "2.716, 2.731, 2.747, 2.778, 2.880, 3.036, 3.207", \
                     "2.742, 2.758, 2.773, 2.805, 2.906, 3.062, 3.234", \
                     "2.775, 2.791, 2.807, 2.838, 2.939, 3.095, 3.267", \
                     "2.842, 2.857, 2.873, 2.904, 3.006, 3.162, 3.333", \
                     "3.041, 3.056, 3.072, 3.103, 3.204, 3.360, 3.532", \
                     "3.372, 3.388, 3.403, 3.434, 3.536, 3.692, 3.864", \
                     "3.704, 3.719, 3.735, 3.766, 3.867, 4.023, 4.195" \
                   )
                        }
                        fall_transition(ImgROM_load_template) {
                   index_1 ("0.000, 0.020, 0.040, 0.080, 0.210, 0.410, 0.630");
                   values ("0.133, 0.161, 0.188, 0.243, 0.423, 0.699, 1.003")
                }       }

        }
	pin(CLK) {
		direction : input;
		capacitance : 0.439 ;
		clock	    : true;
		min_pulse_width_low	: 0.220;
		min_pulse_width_high	: 0.094;
		min_period		: 2.591;
                max_transition          : 1.500;
        	internal_power(){
	    		when : "CEN";
			rise_power(ImgROM_passive_energy_template_1x2) {
				index_1 ("0.0 1.0");
	    			values ("105.891, 105.891")
			}	
			fall_power(ImgROM_passive_energy_template_1x2) {
				index_1 ("0.0 1.0");
	    			values ("0.0, 0.0")
			}	
		}
        	internal_power(){
			when : "!CEN";
			rise_power(ImgROM_passive_energy_template_1x2) {
				index_1 ("0.0 1.0");
	    			values ("69.721, 69.721")
			}	
			fall_power(ImgROM_passive_energy_template_1x2) {
				index_1 ("0.0 1.0");
	    			values ("0.0, 0.0")
			}	
		}
	}

	pin(CEN) {
		direction : input;
		capacitance : 0.007;
		timing() {
			related_pin	: "CLK" ;
			timing_type	: setup_rising ;
			rise_constraint(ImgROM_constraint_template) {
			index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			values ( \
			  "0.626, 0.648, 0.675, 0.729, 0.892, 1.164, 1.436", \
			  "0.599, 0.621, 0.648, 0.703, 0.866, 1.138, 1.410", \
			  "0.566, 0.588, 0.615, 0.670, 0.833, 1.105, 1.377", \
			  "0.500, 0.522, 0.549, 0.603, 0.766, 1.038, 1.310", \
			  "0.301, 0.323, 0.350, 0.404, 0.568, 0.840, 1.112", \
			  "-0.030, -0.009, 0.019, 0.073, 0.236, 0.508, 0.780", \
			  "-0.362, -0.340, -0.313, -0.259, -0.095, 0.177, 0.449" \
			)
			}
			fall_constraint(ImgROM_constraint_template) {
			index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			values ( \
			  "0.404, 0.430, 0.462, 0.527, 0.721, 1.043, 1.366", \
			  "0.378, 0.404, 0.436, 0.501, 0.694, 1.017, 1.340", \
			  "0.345, 0.371, 0.403, 0.467, 0.661, 0.984, 1.307", \
			  "0.278, 0.304, 0.337, 0.401, 0.595, 0.917, 1.240", \
			  "0.080, 0.105, 0.138, 0.202, 0.396, 0.719, 1.041", \
			  "-0.252, -0.226, -0.194, -0.129, 0.064, 0.387, 0.710", \
			  "-0.583, -0.558, -0.525, -0.461, -0.267, 0.056, 0.378" \
			)
		}	}
		timing() {
			related_pin	: "CLK" ;
			timing_type	: hold_rising ;
			rise_constraint(ImgROM_constraint_template) {
			index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.010, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.209, 0.187, 0.160, 0.106, 0.000, 0.000, 0.000", \
			  "0.541, 0.519, 0.492, 0.437, 0.274, 0.002, 0.000", \
			  "0.872, 0.850, 0.823, 0.769, 0.605, 0.334, 0.062" \
			)
				
			}
			fall_constraint(ImgROM_constraint_template) {
			index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.106, 0.080, 0.048, 0.000, 0.000, 0.000, 0.000", \
			  "0.437, 0.411, 0.379, 0.315, 0.121, 0.000, 0.000", \
			  "0.769, 0.743, 0.711, 0.646, 0.452, 0.130, 0.000" \
			)
	}	}	}


	bus(A)  {
		bus_type : ImgROM_ADDRESS;
		direction : input;
		capacitance : 0.026;
		timing() {
			related_pin	: "CLK" ;
			timing_type	: setup_rising ;
			rise_constraint(ImgROM_constraint_template) {
			index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			values ( \
			  "0.530, 0.552, 0.579, 0.632, 0.794, 1.063, 1.331", \
			  "0.504, 0.525, 0.552, 0.606, 0.767, 1.036, 1.305", \
			  "0.470, 0.492, 0.519, 0.573, 0.734, 1.003, 1.272", \
			  "0.404, 0.426, 0.453, 0.506, 0.668, 0.937, 1.205", \
			  "0.205, 0.227, 0.254, 0.307, 0.469, 0.738, 1.007", \
			  "-0.126, -0.105, -0.078, -0.024, 0.137, 0.406, 0.675", \
			  "-0.458, -0.436, -0.409, -0.356, -0.194, 0.075, 0.344" \
			)
			}
			fall_constraint(ImgROM_constraint_template) {
			index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			values ( \
			  "0.392, 0.415, 0.443, 0.499, 0.666, 0.945, 1.225", \
			  "0.366, 0.388, 0.416, 0.472, 0.640, 0.919, 1.198", \
			  "0.333, 0.355, 0.383, 0.439, 0.606, 0.886, 1.165", \
			  "0.266, 0.289, 0.317, 0.373, 0.540, 0.819, 1.099", \
			  "0.068, 0.090, 0.118, 0.174, 0.341, 0.621, 0.900", \
			  "-0.264, -0.242, -0.214, -0.158, 0.010, 0.289, 0.568", \
			  "-0.595, -0.573, -0.545, -0.489, -0.322, -0.042, 0.237" \
			)
		}	}
		timing() {
			related_pin	: "CLK" ;
			timing_type	: hold_rising ;
			rise_constraint(ImgROM_constraint_template) {
			index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.166, 0.144, 0.117, 0.064, 0.000, 0.000, 0.000", \
			  "0.497, 0.476, 0.449, 0.395, 0.234, 0.000, 0.000", \
			  "0.829, 0.807, 0.780, 0.727, 0.565, 0.296, 0.028" \
			)
			}
			fall_constraint(ImgROM_constraint_template) {
			index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
			values ( \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
			  "0.165, 0.142, 0.114, 0.059, 0.000, 0.000, 0.000", \
			  "0.496, 0.474, 0.446, 0.390, 0.223, 0.000, 0.000", \
			  "0.828, 0.805, 0.777, 0.722, 0.554, 0.275, 0.000" \
			)
	}	}
	}
	cell_leakage_power : 0.101;
  }
}

